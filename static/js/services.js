// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var specialCases;

  specialCases = {
    'Rom, Ljus rom': 'ljus rom',
    'Rom, Mörk rom': 'mörk rom',
    'Vin, Rött vin': 'rött vin',
    'Vin, Vitt vin': 'vitt vin',
    'Öl, Ljus öl': 'ljus öl',
    'Öl, Mörk öl': 'mörk öl'
  };

  angular.module('cocktail.services', []).service('Ingredients', [
    'ApiService', function(ApiService) {
      return this.search = function(searchString, callback) {
        ApiService.searchForIngredients(searchString, function(error, response) {
          var ingredient, seen, uniques, _i, _len, _ref;
          uniques = [];
          seen = {};
          _ref = response.result;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            ingredient = _ref[_i];
            if (ingredient.name2 && !seen[ingredient.name2]) {
              seen[ingredient.name2] = true;
              uniques.push(ingredient);
            } else if (!seen[ingredient.name] && !seen[ingredient.name2]) {
              seen[ingredient.name] = true;
              uniques.push(ingredient);
            }
          }
          return callback(null, uniques);
        });
        return this;
      };
    }
  ]).service('Recipes', [
    'ApiService', function(ApiService) {
      var getSearchWords;
      this.search = function(ingredients, callback) {
        var searchWords;
        searchWords = getSearchWords(ingredients);
        return ApiService.searchForRecipes(searchWords, callback);
      };
      getSearchWords = function(ingredients) {
        var ingredient, name, searchWords, _i, _len;
        searchWords = [];
        for (_i = 0, _len = ingredients.length; _i < _len; _i++) {
          ingredient = ingredients[_i];
          if (!ingredient.categorySearch) {
            name = ingredient.name2 ? ingredient.name2 : ingredient.name;
            searchWords.push(name);
          }
          if (specialCases.hasOwnProperty(ingredient.type)) {
            searchWords.push(specialCases[ingredient.type]);
          } else {
            searchWords.push.apply(searchWords, ingredient.type.split(", "));
          }
        }
        return searchWords;
      };
      return this;
    }
  ]).service('ApiService', [
    '$http', function($http) {
      var GET, POST, baseUrl;
      baseUrl = '/';
      GET = function(url, config, callback) {
        if (config === void 0 ||  config === null) {
          config = {};
        }
        if (config.params === void 0 ||  config.params === null) {
          config.params = {};
        }
        return $http.get(url, config).success(function(data) {
          return callback(null, data);
        }).error(function(err) {
          console.error("Failed request to ", config, err);
          return callback(err, null);
        });
      };
      POST = function(url, content, callback, config) {
        if (config === void 0 ||  config === null) {
          config = {};
        }
        if (config.params === void 0 ||  config.params === null) {
          config.params = {};
        }
        return $http.post(url, content, config).success(function(data) {
          return callback(null, data);
        }).error(function(err) {
          console.log(url, config);
          console.error("Failed request to ", config, err);
          return callback(err, null);
        });
      };
      this.searchForIngredients = function(searchString, callback) {
        var url;
        url = baseUrl + 'ingredients/' + searchString;
        return GET(url, null, callback);
      };
      this.searchForRecipes = function(words, callback) {
        var url;
        url = baseUrl + 'recipesbyingredients?key=' + words.join(",");
        return GET(url, null, function(error, data) {
          var recipes;
          if (error !== void 0 && error !== null) {
            return callback(error, null);
          }
          recipes = data.result[0].recipes;
          return callback(error, recipes);
        });
      };
      return this;
    }
  ]);

}).call(this);
