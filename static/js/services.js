// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  angular.module('cocktail.services', []).service('Ingredients', [
    'ApiService', function(ApiService) {
      return this.search = function(searchString, callback) {
        ApiService.searchForIngredients(searchString, function(error, response) {
          var ingredient, seen, uniques, _i, _len, _ref;
          uniques = [];
          seen = {};
          _ref = response.result;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            ingredient = _ref[_i];
            if (ingredient.name2 && !seen[ingredient.name2]) {
              seen[ingredient.name2] = true;
              uniques.push(ingredient);
            } else if (!seen[ingredient.name] && !seen[ingredient.name2]) {
              seen[ingredient.name] = true;
              uniques.push(ingredient);
            }
          }
          return callback(null, uniques);
        });
        return this;
      };
    }
  ]).service('ApiService', [
    '$http', function($http) {
      var GET, POST, baseUrl;
      baseUrl = '/';
      GET = function(url, config, callback) {
        if (config === void 0 ||  config === null) {
          config = {};
        }
        if (config.params === void 0 ||  config.params === null) {
          config.params = {};
        }
        return $http.get(url, config).success(function(data) {
          return callback(null, data);
        }).error(function(err) {
          console.error("Failed request to ", config, err);
          return callback(err, null);
        });
      };
      POST = function(url, content, callback, config) {
        if (config === void 0 ||  config === null) {
          config = {};
        }
        if (config.params === void 0 ||  config.params === null) {
          config.params = {};
        }
        return $http.post(url, content, config).success(function(data) {
          return callback(null, data);
        }).error(function(err) {
          console.log(url, config);
          console.error("Failed request to ", config, err);
          return callback(err, null);
        });
      };
      this.searchForIngredients = function(searchString, callback) {
        var url;
        url = baseUrl + 'ingredients/' + searchString;
        return GET(url, null, callback);
      };
      return this;
    }
  ]);

}).call(this);
